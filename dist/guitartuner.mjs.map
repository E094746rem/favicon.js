{"mappings":"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","sources":["guitartuner.js/src/guitartuner.js","guitartuner.js/src/autocorrelation.js"],"sourcesContent":["import Autocorrelation from \"./autocorrelation\";\n\nclass GuitarTuner {\n  #stream;\n  #audioContext;\n  #mediaStreamSource;\n  #analyser;\n  #fft_size = 2048;\n  #notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  start() {\n    this.#requestMicrophoneAccess();\n  }\n\n  stop() {\n    const recorder = new MediaRecorder(this.#stream);\n    recorder.stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  setCallback(callback) {\n    this.callback = callback;\n  }\n\n  #requestMicrophoneAccess() {\n    navigator.mediaDevices\n      .getUserMedia({ video: false, audio: true })\n      .then((stream) => {\n        this.#stream = stream;\n        this.#createAnalyser();\n        this.#draw();\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  #createAnalyser() {\n    this.#audioContext = new AudioContext();\n    this.#mediaStreamSource = this.#audioContext.createMediaStreamSource(\n      this.#stream\n    );\n    this.#analyser = this.#audioContext.createAnalyser();\n    this.#analyser.fftSize = this.#fft_size;\n    this.#mediaStreamSource.connect(this.#analyser);\n  }\n\n  #draw() {\n    requestAnimationFrame(() => {\n      this.#draw();\n    });\n\n    const bufferLength = this.#analyser.fftSize;\n    const buffer = new Float32Array(bufferLength);\n    this.#analyser.getFloatTimeDomainData(buffer);\n    const sampleRate = this.#audioContext.sampleRate;\n    const autocorrelation = new Autocorrelation(buffer, sampleRate);\n    const frequency = autocorrelation.execute();\n    if (frequency === -1) return;\n\n    const note = this.#frequencyToNote(frequency);\n    if (typeof this.callback === \"function\") this.callback(frequency, note);\n  }\n\n  #frequencyToNote(frequency) {\n    var noteNum = 12 * (Math.log(frequency / 440) / Math.log(2));\n    return this.#notes[(Math.round(noteNum) + 69) % 12];\n  }\n}\n\nexport default GuitarTuner;\n","class Autocorrelation {\n  constructor(buffer, sampleRate) {\n    this.buffer = buffer;\n    this.sampleRate = sampleRate;\n  }\n\n  // Using the strategy defined here.\n  // https://github.com/cwilso/PitchDetect/pull/23\n  execute() {\n    // Reject if RMS is too small.\n    const rms = this.#rms(this.buffer);\n    if (rms < 0.05) return -1;\n\n    // Trim the buffer so that it starts and ends at \"zero\".\n    const startPosition = this.#startPosition(this.buffer, 0.2);\n    const endPosition = this.#endPosition(this.buffer, 0.2);\n    this.buffer = this.buffer.slice(startPosition, endPosition);\n\n    // Take the dot product of the offsets\n    var c = new Array(this.buffer.length).fill(0);\n    for (var i = 0; i < this.buffer.length; i++)\n      for (var j = 0; j < this.buffer.length - i; j++)\n        c[i] = c[i] + this.buffer[j] * this.buffer[j + i];\n\n    // Find the maximum value and its position\n    var d = 0;\n    while (c[d] > c[d + 1]) d++;\n    var maxval = -1,\n      maxpos = -1;\n    for (var i = d; i < this.buffer.length; i++) {\n      if (c[i] > maxval) {\n        maxval = c[i];\n        maxpos = i;\n      }\n    }\n    var T0 = maxpos;\n\n    // Some type of smoothing\n    // interpolation is parabolic interpolation. It helps with precision. We suppose that a parabola pass through the three points that comprise the peak. 'a' and 'b' are the unknowns from the linear equation system and b/(2a) is the \"error\" in the abscissa. Well x1,x2,x3 should be y1,y2,y3 because they are the ordinates.\n    var x1 = c[T0 - 1],\n      x2 = c[T0],\n      x3 = c[T0 + 1];\n    const a = (x1 + x3 - 2 * x2) / 2;\n    const b = (x3 - x1) / 2;\n    if (a) T0 = T0 - b / (2 * a);\n\n    // Return the frequency / pitch\n    return this.sampleRate / T0;\n  }\n\n  // Calculates and returns the root mean square of the array.\n  #rms(array) {\n    const squares = array.map((value) => value * value);\n    const sum = squares.reduce((accumulator, value) => accumulator + value);\n    const mean = sum / array.length;\n    return Math.sqrt(mean);\n  }\n\n  // Finds and returns the first near zero within the array.\n  #startPosition(array, threshold) {\n    for (var i = 0; i < array.length / 2; i++) {\n      if (Math.abs(array[i]) < threshold) {\n        return i;\n      }\n    }\n  }\n\n  // Finds and returns the last near zero within the array.\n  #endPosition(array, threshold) {\n    for (var i = 1; i < array.length / 2; i++) {\n      if (Math.abs(array[array.length - i]) < threshold) {\n        return array.length - i;\n      }\n    }\n  }\n}\n\nexport default Autocorrelation;\n"],"names":[],"version":3,"file":"guitartuner.mjs.map"}